# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

if [ -n "$DISPLAY" -a "$TERM" == "xterm" ]; then
    export TERM=xterm-256color
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# share bash history
function share_history {
    history -a
    history -c
    history -r
}
PROMPT_COMMAND='share_history'
shopt -u histappend

#peco settings

#C-r: peco history search
peco-search-history() {
    if [[ `uname -s` == "Darwin" ]]; then
        local l=$(HISTTIMEFORMAT= history | tail -r | gsed -e 's/^\s*[0-9]\+\s\+//' | peco --query "$READLINE_LINE")
    else
        local l=$(HISTTIMEFORMAT= history | tac | sed -e 's/^\s*[0-9]\+\s\+//' | peco --query "$READLINE_LINE")
    fi
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
}
bind -x '"\C-r": peco-search-history'
# C-x r: reverse-search-history
bind '"\C-xr": reverse-search-history'
# Esc-p : rostopic search
peco-search-rostopic() {
    local l=$(rostopic list | peco)
    READLINE_LINE="$READLINE_LINE$l"
    READLINE_POINT=${#READLINE_LINE}
}
bind -x '"\ep" : peco-search-rostopic'

# #travis peco history search
# peco-search-travis-history() {
#     local l=$(travis history --limit 20 | peco | sed -e "s/#\([0-9]\+\).*/\1/g")
#     READLINE_LINE="$READLINE_LINE$l"
#     READLINE_POINT=${#READLINE_LINE}
# }
# bind -x '"\eo" :peco-search-travis-history'

# anaconda
activate () {
  unset PYTHONPATH
  source $HOME/.anaconda/bin/activate
}

# #Bash-it
# Path to the bash it configuration
export BASH_IT="$HOME/.bash_it"

# Lock and Load a custom theme file
# location /.bash_it/themes/
export BASH_IT_THEME='zork'

# Load Bash It
source $BASH_IT/bash_it.sh

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#bash_aliases
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#less
export LESS="-g -i -M -R -S -W -z-4 -x4"
export PAGER=less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[00;47;30m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# #lesspipe
if which lesspipe.sh > /dev/null; then
  export LESSOPEN='| /usr/bin/env lesspipe.sh %s 2>&-'
fi

#JAVA setting
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

#ccache
export CCACHE_DIR="$HOME/.ccache"

#ROS
if [ -e "/opt/ros/kinetic/setup.bash" ]; then
  source /opt/ros/kinetic/setup.bash
elif [ -e "/opt/ros/melodic/setup.bash" ]; then
  source /opt/ros/melodic/setup.bash
fi
if [ -e "$HOME/ros/$ROS_DISTRO/devel/setup.bash" ]; then
  source ~/ros/$ROS_DISTRO/devel/setup.bash
  source `rospack find jsk_tools`/src/bashrc.ros
  unalias git
  rossetlocal
fi
if [ -e "$HOME/gitai/catkin_ws/devel/setup.bash" ]; then
  source $HOME/gitai/catkin_ws/devel/setup.bash
  source `rospack find jsk_tools`/src/bashrc.ros
  unalias git
  rossetlocal
fi
export ROSCONSOLE_FORMAT='[${severity}] [${time}] [${node}:${logger}]: ${message}'

export EDITOR='vim'

#Golang
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

#CUDA
if [ -d  "/usr/local/cuda" ]; then
  export CUDA_ROOT=/usr/local/cuda
  # export CUDA_HOME=/usr/local/cuda
  export PATH=$PATH:$CUDA_ROOT/bin
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_ROOT/lib64
  export CFLAGS=-I$CUDA_ROOT/include
  export LDFLAGS=-L$CUDA_ROOT/lib64
fi

# caffe
if [ -d  "$HOME/install/caffe" ]; then
  export CAFFE_ROOT=$HOME/install/caffe
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CAFFE_ROOT/build/lib
  export PYTHONPATH=$PYTHONPATH:$CAFFE_ROOT/python
fi

#LD_LIBRARY_PATH
if [[ $LD_LIBRARY_PATH = "" ]]; then
  export LD_LIBRARY_PATH=/usr/local/lib
else
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
fi

#neovim setting
export XDG_CONFIG_HOME=~/.config
# alias_completion
alias_completion
# for not sudoer
export PATH=$HOME/.local/bin:$PATH

# svn
export SVN_SSH="ssh -l s-kitagawa"

# choreonoid
export CNOID_INSTALL_DIR=/usr/local/choreonoid
export CNOID_RTM_DIR=/opt/ros/$ROS_DISTRO
export PKG_CONFIG_PATH=${CNOID_INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
export PATH=${CNOID_INSTALL_DIR}/bin:$PATH
export ORBgiopMaxMsgSize=2097152000

# firefox
export MOZ_USE_XINPUT2=1

source `which pycd.sh`

if which activate.sh > /dev/null; then
  source `which activate.sh`
fi

export SSH_USER=s-kitagawa
export SVN_SSH="ssh -l ${SSH_USER}"

# robosherlock
export APR=/usr
export ICU_HOME=/usr
export XERCES_HOME=/usr

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Deno
export DENO_INSTALL="/home/knorth55/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# docui
export LC_CTYPE=en_US.UTF-8
export TERM=xterm-256color

#python naoqi
export PYTHONPATH=$HOME/pynaoqi/pynaoqi-python2.7-2.5.5.5-linux64/lib/python2.7/site-packages:$PYTHONPATH

# rust
export PATH=$PATH:$HOME/.cargo/bin

# pypi
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

# ros function
rossetfetch15 () {
  rossetip
  rossetmaster fetch15
}

rossetfetch1075 () {
  rossetip
  rossetmaster fetch1075
}

rossetbaxter () {
  rossetip
  rossetmaster baxter
}

rossetpr1012 () {
  rossetip
  rossetmaster pr1012
}

rossetpr1040 () {
  rossetip
  rossetmaster pr1040
}

# eus function
eussource () {
  if [ -d "$HOME/install/jskeus" ]; then
    export EUSDIR=$HOME/install/jskeus/eus
    export ARCHDIR=Linux64
    export CVSDIR=$HOME/install
    export PATH=$EUSDIR/$ARCHDIR/bin:$EUSDIR/$ARCHDIR/lib:$PATH
    export LD_LIBRARY_PATH=$EUSDIR/$ARCHDIR/lib:$LD_LIBRARY_PATH
    echo "EUSDIR: $EUSDIR"
  elif [ -d "$HOME/projects/jskeus" ]; then
    export EUSDIR=$HOME/projects/jskeus/eus
    export ARCHDIR=Linux64
    export PATH=$EUSDIR/$ARCHDIR/bin:$EUSDIR/$ARCHDIR/lib:$PATH
    export LD_LIBRARY_PATH=$EUSDIR/$ARCHDIR/lib:$LD_LIBRARY_PATH
    export CVSDIR=$HOME/projects
    echo "EUSDIR: $EUSDIR"
  fi
}

setup_vive () {
  source $HOME/ros/vive_ws/devel/setup.bash
  eussource
  echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
  echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
}

# Euslisp

eussource
echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

# BEGIN ANSIBLE MANAGED BLOCK
export GIT_AUTHOR_NAME=$(git config --global --default '' --get user.name)
export GIT_AUTHOR_EMAIL=$(git config --global --default '' --get user.email)
export GIT_COMMITTER_NAME=$(git config --global --default '' --get user.name)
export GIT_COMMITTER_EMAIL=$(git config --global --default '' --get user.email)
# END ANSIBLE MANAGED BLOCK
#
export AWS_PROFILE=gitai

. "/home/knorth55/.deno/env"
